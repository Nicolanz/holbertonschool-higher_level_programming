3-say_my_name.txt


===============================
 how to use 3-say_my_name.py
===============================

This is the module to explain the use of ``say_my_name()``.



Numbers
=======

``say_my_name()`` - Prints name of the arguments passed

Correct usage: Complete the function with two string parameters


Firts import the module.

::

    >>> say_my_name = __import__('3-say_my_name').say_my_name

basic usage.

::

    >>> say_my_name("Nicolas", "Zarate")
    My name is Nicolas Zarate

One parameter passed.

::

    >>> say_my_name("Nicolas")
    My name is Nicolas 

Empty string

::

    >>> say_my_name("", "Nicolas")
    My name is  Nicolas

If Firts Name is not a string.

::

    >>> say_my_name(21, "Zarate")
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string

If Last Name is not a string.

::

    >>> say_my_name("Nicolas", 21)
    Traceback (most recent call last):
    ...
    TypeError: last_name must be a string

If no arguments are passed.

::

    >>> say_my_name()
    Traceback (most recent call last):
    ...
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

If both arguments are not strings

::

    >>> say_my_name(21, 22)
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string
