2-matrix_divided.txt


===============================
 how to use 2-matrix_divided.py
===============================

This is the module to explain the use of ``matrix_divided()``.

Numbers
=======

``matrix_divided()`` recieves two parameters, where pam1 = matrix 
and pam2 = number which divides. It returns a nex copy of matrix with 
the values of the original matrix divided and rounded to decimals.



Correct usage: bring the module and Initialize a simple matrix with
int or float values, each row should have the same size.

Initialize a simple matrix.

::

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [[1, 2, 3], [4, 5, 6]]

Simple usage.

::

    >>> print(matrix_divided(matrix, 3))
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Simple usage with any float value.

::

    >>> matrix = [[1, 2.4, 3], [4, 5, 6.2]]
    >>> print(matrix_divided(matrix, 6))
    [[0.17, 0.4, 0.5], [0.67, 0.83, 1.03]]

Usage with a negative value.

::

    >>> matrix = [[1, -4, 3], [4, 5, 6]]
    >>> print(matrix_divided(matrix, 2))
    [[0.5, -2.0, 1.5], [2.0, 2.5, 3.0]]

Returns a copy of the original matrix with the new values.

::

    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
    >>> print(matrix)
    [[1, 2, 3], [4, 5, 6]]

Error if rows don't have the same size:

::

    >>> matrix = [[1,2], [3, 4, 5]]
    >>> print(matrix_divided(matrix, 5))
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

Error if any value isn't int or float:

::

    >>> matrix = [[1, 3, "value"], [3, 4, 5]]
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Error if div value = 0:

::

    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero

Error if div is not an int or float:

::

    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> print(matrix_divided(matrix, "Hello"))
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

Error if there are no paramaters passed:

::

    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> print(matrix_divided())
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'